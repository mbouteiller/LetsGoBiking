//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HeavyClient.Biking {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Biking.IBiking")]
    public interface IBiking {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/GetAddressCoordinates", ReplyAction="http://tempuri.org/IBiking/GetAddressCoordinatesResponse")]
        string GetAddressCoordinates(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/GetAddressCoordinates", ReplyAction="http://tempuri.org/IBiking/GetAddressCoordinatesResponse")]
        System.Threading.Tasks.Task<string> GetAddressCoordinatesAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/GetNearestStations", ReplyAction="http://tempuri.org/IBiking/GetNearestStationsResponse")]
        string GetNearestStations(double startLon, double startLat, double endLon, double endLat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/GetNearestStations", ReplyAction="http://tempuri.org/IBiking/GetNearestStationsResponse")]
        System.Threading.Tasks.Task<string> GetNearestStationsAsync(double startLon, double startLat, double endLon, double endLat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/GetStartWalkDirections", ReplyAction="http://tempuri.org/IBiking/GetStartWalkDirectionsResponse")]
        string GetStartWalkDirections(double startLon, double startLat, double endLon, double endLat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/GetStartWalkDirections", ReplyAction="http://tempuri.org/IBiking/GetStartWalkDirectionsResponse")]
        System.Threading.Tasks.Task<string> GetStartWalkDirectionsAsync(double startLon, double startLat, double endLon, double endLat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/GetEndWalkDirections", ReplyAction="http://tempuri.org/IBiking/GetEndWalkDirectionsResponse")]
        string GetEndWalkDirections(double startLon, double startLat, double endLon, double endLat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/GetEndWalkDirections", ReplyAction="http://tempuri.org/IBiking/GetEndWalkDirectionsResponse")]
        System.Threading.Tasks.Task<string> GetEndWalkDirectionsAsync(double startLon, double startLat, double endLon, double endLat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/GetBikingDirections", ReplyAction="http://tempuri.org/IBiking/GetBikingDirectionsResponse")]
        string GetBikingDirections(double startLon, double startLat, double endLon, double endLat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/GetBikingDirections", ReplyAction="http://tempuri.org/IBiking/GetBikingDirectionsResponse")]
        System.Threading.Tasks.Task<string> GetBikingDirectionsAsync(double startLon, double startLat, double endLon, double endLat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/getCoordinates", ReplyAction="http://tempuri.org/IBiking/getCoordinatesResponse")]
        string getCoordinates(double startLon, double startLat, double endLon, double endLat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiking/getCoordinates", ReplyAction="http://tempuri.org/IBiking/getCoordinatesResponse")]
        System.Threading.Tasks.Task<string> getCoordinatesAsync(double startLon, double startLat, double endLon, double endLat);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBikingChannel : HeavyClient.Biking.IBiking, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BikingClient : System.ServiceModel.ClientBase<HeavyClient.Biking.IBiking>, HeavyClient.Biking.IBiking {
        
        public BikingClient() {
        }
        
        public BikingClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BikingClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BikingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BikingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetAddressCoordinates(string address) {
            return base.Channel.GetAddressCoordinates(address);
        }
        
        public System.Threading.Tasks.Task<string> GetAddressCoordinatesAsync(string address) {
            return base.Channel.GetAddressCoordinatesAsync(address);
        }
        
        public string GetNearestStations(double startLon, double startLat, double endLon, double endLat) {
            return base.Channel.GetNearestStations(startLon, startLat, endLon, endLat);
        }
        
        public System.Threading.Tasks.Task<string> GetNearestStationsAsync(double startLon, double startLat, double endLon, double endLat) {
            return base.Channel.GetNearestStationsAsync(startLon, startLat, endLon, endLat);
        }
        
        public string GetStartWalkDirections(double startLon, double startLat, double endLon, double endLat) {
            return base.Channel.GetStartWalkDirections(startLon, startLat, endLon, endLat);
        }
        
        public System.Threading.Tasks.Task<string> GetStartWalkDirectionsAsync(double startLon, double startLat, double endLon, double endLat) {
            return base.Channel.GetStartWalkDirectionsAsync(startLon, startLat, endLon, endLat);
        }
        
        public string GetEndWalkDirections(double startLon, double startLat, double endLon, double endLat) {
            return base.Channel.GetEndWalkDirections(startLon, startLat, endLon, endLat);
        }
        
        public System.Threading.Tasks.Task<string> GetEndWalkDirectionsAsync(double startLon, double startLat, double endLon, double endLat) {
            return base.Channel.GetEndWalkDirectionsAsync(startLon, startLat, endLon, endLat);
        }
        
        public string GetBikingDirections(double startLon, double startLat, double endLon, double endLat) {
            return base.Channel.GetBikingDirections(startLon, startLat, endLon, endLat);
        }
        
        public System.Threading.Tasks.Task<string> GetBikingDirectionsAsync(double startLon, double startLat, double endLon, double endLat) {
            return base.Channel.GetBikingDirectionsAsync(startLon, startLat, endLon, endLat);
        }
        
        public string getCoordinates(double startLon, double startLat, double endLon, double endLat) {
            return base.Channel.getCoordinates(startLon, startLat, endLon, endLat);
        }
        
        public System.Threading.Tasks.Task<string> getCoordinatesAsync(double startLon, double startLat, double endLon, double endLat) {
            return base.Channel.getCoordinatesAsync(startLon, startLat, endLon, endLat);
        }
    }
}
